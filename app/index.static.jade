extends _default
include _mixins

block title
  title Hello

block slides
  - var arrow_left  = 'l 3 -10 l -10 10 l 10 10 l -3 -10'
  - var arrow_right = 'l -3 -10 l 10 10 l -10 10 l 3 -10'
  - var arrow_up    = 'l 10 3 l -10 -10 l -10 10 l 10 -3'
  - var arrow_down  = 'l -10 -3 l 10 10 l 10 -10 l -10 3'

  +slide
    h3 From statistical mechanics
    h3 to real-world traffic simulations
    div(style='margin-top: 4em;')
      p Andrea Bedini
      p
        small The University of Melbourne / MASCOS / ACEMS
    img(src="acems.jpg", style="border: none; box-shadow: none; height: 5em;")

  +slide
    +slide
      ul(style='margin-top: 3em;')
        li 2008 ARC CoE MASCOS begins working with VicRoads
        li 2008–2011 MASCOS/VicRoads projects build prototype
        li 2012–2014 ARC Linkage Project
        li 2015 ARC CoE ACEMS

    +slide
      h3 Many people involved
      ul
        li Jan de Gier (University of Melbourne)
        li Tim Garoni (Monash University)
        li Lele Zhang (Monash University)
        li Somayeh Shiri (Monash University)
        li Omar Rojas (La Trobe University)
        li Chris Manzie (University of Melbourne)
        li Will Moase (University of Melbourne)
        li Hai Vu (Swinburne)
        li Manoj Panda (Swinburne)
        li Andrea Bedini (University of Melbourne)

    +slide
      h3 In brief
      ul
        li.fragment A traffic simulator
        li.fragment Stochastic cellular automata
        li.fragment Discrete in time and space
        li.fragment Mesoscopic
        li.fragment Agent-based
        li.fragment Realistic traffic signals
        li.fragment Multi-modal

      aside.notes.
        Microscopic track individual cars
        Macroscopic track density

        Agent based behaviour rules

  +slide

    +slide(data-transition='none-out')
      h3 Nagel-Schreckenberg process

      svg#nasch.fragment

      ul.fragment
        li Let $0 < p < 1$, and $v_{max} \in \mathbb N$
        li Let $x_n$ and $v_n$ be the position and speed of the $n$th vehicle
        li Let $d_n$ be the gap in front of the $n$th vehicle

        .fragment
          p Update rules
          li $v_n = \min\left(v_n + 1, v_{max}\right)$
          li $v_n = \min\left(v_n, d_n\right)$
          li $v_n = v_n - 1$ with probability $p$
          li $x_n = x_n + v_n$

      aside.notes.
        Nagel, Schreckenberg, J Phys (1992)

        Acceleration of free cars, deceleration due to other cars,
        randomisation, movement

    +slide(data-transition='none-in')
      h3 Nagel-Schreckenberg process

      svg#nasch

      ul
        p Realistic parameters
        li time step 1 sec
        li cell size $\sim 7.5 \text{m}$
        li $v_{max} = 5$ corresponds to 135 km/h
        .fragment
          br
          li Very simple model of a driven system
          li Likely in the KPZ universality class

      aside.notes.
        Just like ASEP

  +slide
    +slide
      h3 Extensions

      p.fragment.
        How do we turn this into a realistic model for traffic?

      ul
        .fragment
          li Roads form a network
          li Roads (links) have many lanes
          li Intersections

        .fragment
          br
          li Rules for lane changing
          li Rules for intersections
          li Turning decisions

        .fragment
          br
          li Multiple vehicles types: cars, trams, buses, trains, ...

      aside.notes.
        Despite being two days from 21 October 2015

    +slide(data-background="Back-to-the-Future-II-Hoverboard.jpg")
      div(style="margin-top: 40%; color: white")
        h1(style="color: white") NO HOVERBOARD

    +slide
      h3 Dynamic lane changing

      svg#dynamic(width=800, height=200)
        - var lanes = 2, length = 15
        - for (var l = 0; l <= lanes; l++)
          line(x1=0, y1='#{50 * l}', x2='#{50 * length}', y2='#{50 * l}', stroke='black', stroke-width=1)
        - for (var c = 0; c <= length; c++)
          line(x1='#{50 * c}', y1=0, x2='#{50 * c}', y2='#{50 * lanes}', stroke='black', stroke-width=1)
        +car(5, 0, 'A')(fill='#1b9e77')
        +car(9, 0, 2)
        +car(2, 1, 'B')(fill='#d95f02', data-fragment-index=2).fragment
        +car(11, 1, 3)
        foreignObject(x=300, y=-65, data-fragment-index=1).fragment.
          \(\underleftrightarrow{\hspace 9.5pt \, d_A \, \hspace 9.5pt}\)
        foreignObject(x=300, y=100, data-fragment-index=1).fragment.
          \(\overleftrightarrow{\hspace 18pt \, d_A^{(f)} \, \hspace 18pt}\)
        foreignObject(x=150, y=100, data-fragment-index=2).fragment.
          \(\overleftrightarrow{\hspace 2.2pt \, d_A^{(b)} \, \hspace 2.2pt}\)

      ul
        li.fragment.
          If $\min\left(\color{#1b9e77}{v_A} + 1, d_A^{(f)}, v_{max}\right) >
          \min\left(\color{#1b9e77}{v_A} + 1, d_A, v_{max}\right)$ then lane
          change is <em>desirable</em>
        li.fragment.
          If $d_A^{(b)} \geq \color{#d95f02}{v_B}$ the lane change is
          <em>safe</em>
        li.fragment.
          If desirable <em>and</em> safe, accept with probabiltiy $p_{change}$

      aside.notes.
        Look forward, look back

    +slide
      h3 Topological lane changing

      svg#topological(width=800, height=300)
        g
          - for (var x = 0; x < 15; x++)
            rect(x='#{50*x}', y=100, width=50, height='50')
            rect(x='#{50*x}', y=150, width=50, height='50')
        g
          - for (var y = 0; y < 4; y++)
            rect(x=500, y='#{100-50*y}', width='50', height='50')
            rect(x=550, y='#{100-50*y}', width='50', height='50')
        g
          - for (var y = 0; y < 4; y++)
            rect(x=500, y='#{150+50*y}', width='50', height='50')
            rect(x=550, y='#{150+50*y}', width='50', height='50')
        rect(x=500, y=100, width=100, height=100, style='fill: lightgoldenrodyellow;')
        path(d="M 375 125 h 300 #{arrow_right}", stroke='blue' fill='none')
        path(d="M 375 125 h 100 q 50 0 50 -50 #{arrow_up}", stroke='blue', fill='none')
        path(d="M 375 175 h 300 #{arrow_right}", stroke='blue', fill='none')
        path(d="M 375 175 h 100 q 50 0 50 50 #{arrow_down}", stroke='blue', fill='none')

        g(data-fragment-index=1).fragment
          +car(5, 2, 'A')(fill='#1b9e77')
          +car(10, 0, 'A')(fill='#1b9e77', stroke-dasharray="5 5")
        g(data-fragment-index=3).fragment
          +car(3, 3, 'B')(fill='#d95f02')
          +car(14, 3, 'B')(fill='#d95f02', stroke-dasharray="5 5")
        g(data-fragment-index=5).fragment
          +car(2, 2, 'C')(fill='#7570b3')
          +car(10, 5, 'C')(fill='#7570b3', stroke-dasharray="5 5")

      ul
        li(data-fragment-index=2).fragment
          span(style='color: #1b9e77;') A
          |  is not allowed to change lane, not required to
        li(data-fragment-index=4).fragment
          span(style='color: #d95f02;') B
          |  is allowed to change lane, not required to
        li(data-fragment-index=6).fragment
          span(style='color: #7570b3;') C
          |  is allowed to change lane, required to

      p(data-fragment-index=7).fragment.
        Dynamical lane changing allowed if it doesn't contradict topological lane changing

      aside.notes.
        A path is a pair (in-lane, out-lane)

        Assume a vehicle A has decided to turn left ...

    +slide
      h3 Turning decisions

      ul
        li Random with some input probabilities: $P(l \to l')$
        li Decision made when vehicle first enters a link
        li It affects lane changing dynamics
        li Turning probabilities can be constant or time-dependent

      div(style="margin-top: 1em;").fragment
        h3 Boundary rates

        ul
          li Links are given (time-dependent) inflow and outflow rates
          li "Open" boundaries conditions

      aside.notes.
        A sort of random walk in a random environment

    +slide(data-transition='none-in')
      h3 Intersections - phases

      svg(width=800, height=400)
        line(x1=0, y1=150, x2=800, y2=150, stroke='black', stroke-width=1)
        line(x1=0, y1=200, x2=800, y2=200, stroke='black', stroke-width=1)
        line(x1=0, y1=250, x2=800, y2=250, stroke='black', stroke-width=1)

        line(x1=350, y1=0, x2=350, y2=400, stroke='black', stroke-width=1)
        line(x1=400, y1=0, x2=400, y2=400, stroke='black', stroke-width=1)
        line(x1=450, y1=0, x2=450, y2=400, stroke='black', stroke-width=1)

        rect(x=350, y=150, width=100, height=100, style='fill: lightgoldenrodyellow;')

        g
          text(x=100, y=100, fill="violet", data-fragment-index=2).fragment.current-visible.
            Phase 1
          text(x=100, y=100, fill="violet", data-fragment-index=3).fragment.current-visible.
            Phase 2
          text(x=100, y=100, fill="violet", data-fragment-index=4).fragment.current-visible.
            Phase 3

        g
          path(d="M 50 175 h 50 #{arrow_right}", stroke='black' fill='black')
          path(d="M 100 225 h -50 #{arrow_left}", stroke='black' fill='black')

          path(d="M 700 175 h 50 #{arrow_right}", stroke='black' fill='black')
          path(d="M 750 225 h -50 #{arrow_left}", stroke='black' fill='black')

          path(d="M 375 75 v -50 #{arrow_up}", stroke='black' fill='black')
          path(d="M 425 25 v 50 #{arrow_down}", stroke='black' fill='black')

          path(d="M 375 375 v -50 #{arrow_up}", stroke='black' fill='black')
          path(d="M 425 325 v 50 #{arrow_down}", stroke='black' fill='black')

        g(data-fragment-index=2).fragment.current-visible
          path(d="M 275 175 h 250 #{arrow_right}", stroke='blue', fill='none')
          path(d="M 275 175 h 50 q 50 0 50 -50 v -25 #{arrow_up}", stroke='blue', fill='none')

          path(d="M 275 225 #{arrow_left} h 250", stroke='blue', fill='none')
          path(d="M 525 225 h -50 q -50 0 -50 50 v 25 #{arrow_down}", stroke='blue', fill='none')

        g(data-fragment-index=3).fragment.current-visible
          path(d="M 375 300 v -200 #{arrow_up}", stroke='blue', fill='none')
          path(d="M 375 300 v -25 q 0 -50 -50 -50 h -25 #{arrow_left}", stroke='blue', fill='none')

          path(d="M 425 100 v 200 #{arrow_down}", stroke='blue', fill='none')
          path(d="M 425 100 v 25 q 0 50 50 50 h 25 #{arrow_right}", stroke='blue', fill='none')

        g(data-fragment-index=4).fragment.current-visible
          path(d="M 375 300 v -75 q 0 -50 50 -50 h 75 #{arrow_right}", stroke='blue', fill='none')
          path(d="M 425 100 v 75  q 0 50 -50 50 h -75 #{arrow_left}", stroke='blue', fill='none')

      p.
        A <em style="color: violet;">Phase</em> is a set of paths $\mathcal P = \{\color{blue}{P_1}, \ldots, \color{blue}{P_n}\}$

      p Only paths in current phase can be crossed

    +slide
      h3 Intersections - signals

      p Traffic signalling logic chooses the active phase

      ul
        .fragment
          li Fixed time splits
          p Equal time to each phase
        .fragment
          li SCATS (Sydney Coordinated Adaptive Traffic System)
          p Adaptive system, responds to real-time data
        .fragment
          li SOTL (Self-Organised Traffic Lights)
          p
            small J de Gier, T M Garoni, O Rojas, J. Stat. Mech. (2011)
            br/
            | Also adaptive, acyclic

      aside.notes.
        A finite state machine that defines the current active phase
        Different systems come with a bunch of parameters

    +slide
      img(src="phases_bridge.svg", style="border: none; box-shadow: none; margin-top: 2em;")

    +slide
      img(src="structure.svg", style="border: none; box-shadow: none;")

    +slide
      h3 Macroscopic Fundamental Diagram
      h4 Non-stationary

      table
        tr
          td(width="50%")
            img(src="mfd_buisson.png", style="border: none; box-shadow: none;")
            p: small Buisson & Ladier 2009 <br> Empirical data from Toulouse
          td(width="50%")
            img(src="mfd_nonstationary.svg", style="border: none; box-shadow: none;")
            p: small Zhang, Garoni, de Gier 2013 <br> Simulated data

  +slide
    +slide
      h3 Applications

      ul
        .fragment
          p Theoretical nature
          li Incidents and diversions
          li Effect of parking
          li Tram priority
          li Effect of tram stop location
        .fragment
          p Case studies
          li Inner North region
          li Hoddle St/Bridge Rd intersection

    +slide
      h3 Hoddle St project

      p Test different design for a specific intersection

      iframe(width='100%', height='520', frameborder='0',
        src='https://andreabedini.cartodb.com/viz/d7ae720c-23af-11e5-8322-0e9d821ea90d/embed_map',
        allowfullscreen, webkitallowfullscreen, mozallowfullscreen,
        oallowfullscreen, msallowfullscreen)

    +slide

      #new-design
        img(src="new_design_1.png")#new-design-1
        img(src="new_design_2.png")#new-design-2
        img(src="new_design_3.png")#new-design-3

    +slide
      h3 Calibrating the demand

      img(src="volume_33863332_33323386.svg", width=800, style="border: none; box-shadow: none;")

      p Boundary rates are tuned to match the measured throughput of vehicles

    +slide
      img(src="extra_comparison_link_33923390_four.svg", width=800, style="border: none; box-shadow: none; margin-top: 2em;")

  +slide
    h3 Open questions

    ul(style="margin-top: 3em;")
      li How sensitive is this model to the parameters?
      li Can we estimate parameters from data?
      li How to present error bars with so much uncertainty?

    aside.notes.
      Estimating errors is hard

mixin car(cell, lane, speed)
  circle.vehicle(cx='#{50 * (cell + 0.5)}', cy='#{50 * (lane + 0.5)}', r='20')&attributes(attributes)
  text.vehicle(x='#{50 * (cell + 0.5)}', y='#{50 * (lane + 0.5)}')&attributes(attributes) #{speed}

